{
    "data": [
        {
            "id": "introduction",
            "name": "introduction",
            "raw": "<div class=\"introduction\"><img src=\"image/logo.png\" alt=\"Jalali\"><h1>Jalali 8</h1><div class=\"description\"><p>The jalali is package for change solar calendar and gregorian together and provide helper function to use date and time.</p><p>Jalali extend class PHP Datetime and compatible with Carbon Package.</p><p>Jalali use algorithm transform jalali to gregorian and revert. This transformer Jalali Calendar written Vahid Sohrablo, Rozbeh Pournader and Mohammad Tosi.</p><p>This package has been created by Nasser Hekmati under the license of MIT.</p></div></div>"
        },
        {
            "id": "installation",
            "name": "installation",
            "title": "Installation",
            "description": "command install jalali",
            "raw": "<pre>\n<code class=\"language-bash\">\ncomposer require hekmatinasser/jalali\n</code>\n</pre><table><thead><tr><th>PHP Version</th><th>Package Version</th></tr></thead><tbody><tr><td>8.0</td><td>8.x</td></tr></tbody></table>"
        },
        {
            "id": "usage",
            "name": "usage",
            "title": "Usage",
            "description": "Use top of each file of the use Jalali class",
            "raw": "<pre>\n<code class=\"language-php\">\nuse Hekmatinasser\\Jalali\\Jalali;</code></pre>"
        },
        {
            "id": "instantiate",
            "name": "instantiate",
            "title": "Instantiate",
            "children": [
                {
                    "id": "new",
                    "name": "new",
                    "title": "jalali(datetime, timezone)",
                    "description": "To get the datetime",
                    "arguments": {
                        "datetime": "DateTime|string|number|null",
                        "timezone": "TimeZone|string|null"
                    },
                    "return": "object jalali",
                    "example": "echo new Jalali();\n// output 1401-03-26 15:32:12"
                },
                {
                    "id": "helper",
                    "name": "jalali()",
                    "title": "jalali(datetime, timezone)",
                    "description": "",
                    "arguments": {
                        "datetime": "DateTime|string|number|null",
                        "timezone": "TimeZone|string|null"
                    },
                    "return": "object jalali",
                    "example": "echo jalali('2019-01-01 10:20:11');\n// output 11397-10-11 10:20:11"
                },
                {
                    "id": "now",
                    "name": "now()",
                    "title": "now(timezone)",
                    "description": "To get the current datetime",
                    "arguments": {
                        "timezone": "TimeZone|string|null"
                    },
                    "return": "object jalali",
                    "example": "echo Jalali::now();\n// output 1401-03-26 15:32:12"
                },
                {
                    "id": "today",
                    "name": "today()",
                    "title": "today(timezone)",
                    "description": "To get the start today datetime",
                    "arguments": {
                        "timezone": "TimeZone|string|null"
                    },
                    "return": "object jalali",
                    "example": "echo Jalali::today();\n// if now 1401-03-26 15:32:12\n// output 1401-03-26 00:00:00"
                },
                {
                    "id": "tomorrow",
                    "name": "tomorrow()",
                    "title": "tomorrow(timezone)",
                    "description": "To get the start tomorrow datetime",
                    "arguments": {
                        "timezone": "TimeZone|string|null"
                    },
                    "return": "object jalali",
                    "example": "echo Jalali::tomorrow();\n// if now 1401-03-26 00:00:00\n// output 1401-03-27 00:00:00"
                },
                {
                    "id": "yesterday",
                    "name": "yesterday()",
                    "title": "yesterday(timezone)",
                    "description": "To get the start yesterday datetime",
                    "arguments": {
                        "timezone": "TimeZone|string|null"
                    },
                    "return": "object jalali",
                    "example": "echo Jalali::yesterday();\n// if now 1401-03-26 00:00:00\n// output 1401-03-25 00:00:00"
                },
                {
                    "id": "add_interval",
                    "name": "plus interval",
                    "title": "jalali(datetime, timezone)",
                    "description": "To get the add interval current date",
                    "arguments": {
                        "datetime": "DateTime|string|number|null",
                        "timezone": "TimeZone|string|null"
                    },
                    "return": "object jalali",
                    "example": "echo jalali('+2 month');\n// if now 1401-03-26 00:00:00\n// output 1401-05-26 00:00:00"
                },
                {
                    "id": "sub_interval",
                    "name": "sub interval",
                    "title": "jalali(datetime, timezone)",
                    "description": "To get the sub interval current date",
                    "arguments": {
                        "datetime": "DateTime|string|number|null",
                        "timezone": "TimeZone|string|null"
                    },
                    "return": "object jalali",
                    "example": "echo jalali('-1 day');\n// if now 1401-03-26 00:00:00\n// output 1401-03-25 00:00:00"
                },
                {
                    "id": "next_interval",
                    "name": "next interval",
                    "title": "jalali(datetime, timezone)",
                    "description": "To get the next interval current date",
                    "arguments": {
                        "datetime": "DateTime|string|number|null",
                        "timezone": "TimeZone|string|null"
                    },
                    "return": "object jalali",
                    "example": "echo jalali('next sunday');\n// if now 1401-03-26 00:00:00 thursday\n// output 1401-03-29 00:00:00"
                },
                {
                    "id": "last_interval",
                    "name": "last interval",
                    "title": "jalali(datetime, timezone)",
                    "description": "To get the last interval current date",
                    "arguments": {
                        "datetime": "DateTime|string|number|null",
                        "timezone": "TimeZone|string|null"
                    },
                    "return": "object jalali",
                    "example": "echo jalali('last friday');\n// if now 1401-03-26 00:00:00 thursday\n// output 1401-03-20 00:00:00"
                },
                {
                    "id": "instance",
                    "name": "instance()",
                    "title": "instance(datetime, timezone)",
                    "description": "To get the datetime with static access",
                    "arguments": {
                        "datetime": "DateTime|string|number|null",
                        "timezone": "TimeZone|string|null"
                    },
                    "return": "object jalali",
                    "example": "echo Jalali::instance()\n// output 1401-03-20 15:32:21\n\necho Jalali::instance('2019-01-01 10:20:11');\n// output 1397-10-11 10:20:11"
                },
                {
                    "id": "new_timestamp",
                    "name": "new with timestamp",
                    "title": "jalali(datetime, timezone)",
                    "description": "To get the datetime with timestamp",
                    "arguments": {
                        "datetime": "DateTime|string|number|null",
                        "timezone": "TimeZone|string|null"
                    },
                    "return": "object jalali",
                    "example": "echo jalali(1583501791);\n// output 1398-12-16 13:36:31"
                },
                {
                    "id": "new_datetime",
                    "name": "new with Datetime",
                    "title": "jalali(datetime, timezone)",
                    "description": "",
                    "arguments": {
                        "datetime": "DateTime|string|number|null",
                        "timezone": "TimeZone|string|null"
                    },
                    "return": "object jalali",
                    "example": "$datetime = new Datetime('2019-01-01 10:20:11');\necho jalali($datetime);\n// output 1397-10-11 10:20:11"
                },
                {
                    "id": "new_carbon",
                    "name": "new with Carbon",
                    "title": "jalali(datetime, timezone)",
                    "description": "To get the datetime with Carbon",
                    "arguments": {
                        "datetime": "DateTime|string|number|null",
                        "timezone": "TimeZone|string|null"
                    },
                    "return": "object jalali",
                    "example": "$datetime = new Carbon('2019-01-01 10:20:11');\necho jalali($datetime);\n// output 1397-10-11 10:20:11"
                },
                {
                    "id": "copy",
                    "name": "copy",
                    "title": "copy()",
                    "description": "To get copy instance object for manipulate",
                    "return": "object jalali",
                    "example": "$datetime = jalali('2019-01-01 10:20:11');\n$copy = $datetime->copy()->addDay();\necho $datetime;\n// output 1397-10-11 10:20:11\necho $copy;\n// output 1397-10-12 10:20:11"
                },
                {
                    "id": "clone",
                    "name": "clone",
                    "title": "clone()",
                    "description": "To get copy instance object for manipulate. same copy",
                    "return": "object jalali",
                    "example": "$datetime = jalali('2019-01-01 10:20:11');\n$clone = $datetime->clone()->addDay();\necho $datetime;\n// output 1397-10-11 10:20:11\necho $clone;\n// output 1397-10-12 10:20:11"
                },
                {
                    "id": "parse",
                    "name": "parse()",
                    "title": "parse(datetime, timezone)",
                    "description": "To get the jalali datetime as a specific string jalali",
                    "arguments": {
                        "datetime": "string",
                        "timezone": "TimeZone|string|null"
                    },
                    "return": "object jalali",
                    "example": "echo Jalali::parse('1395-10-07 14:12:32');\n// output 1395-10-07 14:12:32\n\necho Jalali::parse('1396 مهر 17');\n// output 1396-07-07 00:00:00"
                },
                {
                    "id": "parse_format",
                    "name": "parseFormat()",
                    "title": "parseFormat(format, datetime, timezone)",
                    "description": "To get the jalali datetime as a specific string jalali",
                    "arguments": {
                        "format": "string",
                        "datetime": "string",
                        "timezone": "TimeZone|string|null"
                    },
                    "return": "object jalali",
                    "example": "echo Jalali::parseFormat('Y n j','1396 مهر 17')\n// output 1396-07-07 00:00:00"
                },
                {
                    "id": "create",
                    "name": "create",
                    "title": "create(year, month, day, hour, minute, second, timezone)",
                    "description": "To get the jalali datetime form separate gregorian date and time",
                    "arguments": {
                        "year": "int",
                        "month": "int",
                        "day": "int",
                        "hour": "int",
                        "minute": "int",
                        "second": "int",
                        "timezone": "TimeZone|string|null"
                    },
                    "return": "object jalali",
                    "example": "echo Jalali::create(2016,12,25,15,20,15); \n// output 1395-10-05 15:20:15"
                },
                {
                    "id": "create_date",
                    "name": "createDate()",
                    "title": "createDate(year, month, day, timezone)",
                    "description": "To get the jalali datetime form separate gregorian date.  hour, minute and second set now",
                    "arguments": {
                        "year": "int",
                        "month": "int",
                        "day": "int",
                        "timezone": "TimeZone|string|null"
                    },
                    "return": "object jalali",
                    "example": "Jalali::createDate(2016,12,25);\n// if now 1398-02-28 15:20:15 \n// output 1395-10-05 15:20:15"
                },
                {
                    "id": "create_time",
                    "name": "createTime()",
                    "title": "createTime(hour, minute, second, timezone)",
                    "description": "To get the jalali datetime form separate gregorian date and time. year, month and day set now",
                    "arguments": {
                        "hour": "int",
                        "minute": "int",
                        "second": "int",
                        "timezone": "TimeZone|string|null"
                    },
                    "return": "object jalali",
                    "example": "echo Jalali::createTime(15,20,15); \n// if now 1395-10-05 23:18:53 \n// output 1395-10-05 15:20:15"
                },
                {
                    "id": "create_gregorian",
                    "name": "createGregorian()",
                    "title": "createGregorian(year, month, day, hour, minute, second, timezone)",
                    "description": "To get the jalali datetime form separate gregorian date and time",
                    "arguments": {
                        "year": "int",
                        "month": "int",
                        "day": "int",
                        "hour": "int",
                        "minute": "int",
                        "second": "int",
                        "timezone": "TimeZone|string|null"
                    },
                    "return": "object jalali",
                    "example": "echo Jalali::createGregorian(2016,12,25,15,20,15); \n// output 1395-10-05 15:20:15"
                },
                {
                    "id": "create_gregorian_date",
                    "name": "createGregorianDate()",
                    "title": "createDate(year, month, day, timezone)",
                    "description": "To get the jalali datetime form separate gregorian date. hour, minute and second set now",
                    "arguments": {
                        "year": "int",
                        "month": "int",
                        "day": "int",
                        "timezone": "TimeZone|string|null"
                    },
                    "return": "object jalali",
                    "example": "echo Jalali::createGregorianDate(2016,12,25); \n// if now 1398-02-28 15:20:15 \n// output 1395-10-05 15:20:15"
                },
                {
                    "id": "create_gregorian_time",
                    "name": "createGregorianTime()",
                    "title": "createTime(hour, minute, second, timezone)",
                    "description": "To get the jalali datetime form separate gregorian date and time. year, month and day set now",
                    "arguments": {
                        "hour": "int",
                        "minute": "int",
                        "second": "int",
                        "timezone": "TimeZone|string|null"
                    },
                    "return": "object jalali",
                    "example": "echo Jalali::createGregorianTime(15,20,15); \n// if now 1395-10-05 23:18:53 \n// output 1395-10-05 15:20:15"
                },
                {
                    "id": "create_timestamp",
                    "name": "createTimestamp()",
                    "title": "createTimestamp(datetime, timezone)",
                    "description": "",
                    "arguments": {
                        "datetime": "number",
                        "timezone": "TimeZone|string|null"
                    },
                    "return": "object jalali",
                    "example": "echo Jalali::createTimestamp(1583501791)\n// output 1398-12-16 13:36:31"
                },
                {
                    "id": "create_jalali",
                    "name": "createJalali()",
                    "title": "createJalali(year, month, day, hour, minute, second, timezone)",
                    "description": "To get the jalali datetime form separate jalali date and time",
                    "arguments": {
                        "year": "int",
                        "month": "int",
                        "day": "int",
                        "hour": "int",
                        "minute": "int",
                        "second": "int",
                        "timezone": "TimeZone|string|null"
                    },
                    "return": "object jalali",
                    "example": "echo Jalali::createJalali(1394,12,29,15,51,5); \n// output 1394-12-29 15:51:05"
                },
                {
                    "id": "create_jalali_date",
                    "name": "createJalaliDate()",
                    "title": "createJalaliDate(year, month, day, timezone)",
                    "description": "To get the jalali datetime form separate jalali date. hour, minute and second set now",
                    "arguments": {
                        "year": "int",
                        "month": "int",
                        "day": "int",
                        "timezone": "TimeZone|string|null"
                    },
                    "return": "object jalali",
                    "example": "echo Jalali::createJalali(1394,12,29);\n// if now 1399-12-23 15:51:05 \n// output 1394-12-29 15:51:05"
                },
                {
                    "id": "create_jalali_time",
                    "name": "createJalaliTime()",
                    "title": "createJalaliTime(hour, minute, second, timezone)",
                    "description": "To get the jalali datetime form separate jalali date. year, month and day set now",
                    "arguments": {
                        "hour": "int",
                        "minute": "int",
                        "second": "int",
                        "timezone": "TimeZone|string|null"
                    },
                    "return": "object jalali",
                    "example": "echo Jalali::createJalali(15,51,5);\n// if now 1394-12-29 13:22:44 \n// output 1394-12-29 15:51:05"
                }
            ]
        },
        {
            "id": "transformation",
            "name": "transformation",
            "title": "Transformation",
            "children": [
                {
                    "id": "jalali_to_gregorian",
                    "name": "jalaliToGregorian()",
                    "title": "jalaliToGregorian(year, month, day)",
                    "description": "To get the jalali datetime form separate gregorian date.",
                    "arguments": {
                        "hour": "int",
                        "minute": "int",
                        "second": "int"
                    },
                    "return": "array",
                    "example": "vardump(Jalali::jalaliToGregorian(1401,03,27));\n// output [2020,6,17]"
                },
                {
                    "id": "gregorian_to_jalali",
                    "name": "GregorianToJalali()",
                    "title": "jalaliToGregorian(year, month, day)",
                    "description": "To get the jalali datetime form separate gregorian date.",
                    "arguments": {
                        "hour": "int",
                        "minute": "int",
                        "second": "int"
                    },
                    "return": "array",
                    "example": "var_dump(Jalali::jalaliToGregorian(2020,6,17));\n// output [1401,03,27]"
                },
                {
                    "id": "datetime",
                    "name": "datetime",
                    "title": "datetime()",
                    "description": "To get the object Datetime php",
                    "return": "object Datetime php",
                    "example": "echo jalali()->datetime();\n// if now 1397-10-11 10:20:11\n// output 2019-01-01 10:20:11"
                }
            ]
        },
        {
            "id": "accessor",
            "name": "accessor",
            "title": "Accessor",
            "children": [
                {
                    "id": "get_year",
                    "name": "get year",
                    "title": "year",
                    "description": "To get year on object jalali",
                    "return": "int",
                    "example": "$datetime = jalali();\n// if now 1397-10-11 10:20:11\necho$datetime->year\n// output 1397"
                },
                {
                    "id": "get_month",
                    "name": "get month",
                    "title": "month",
                    "description": "To get month on object jalali",
                    "return": "int",
                    "example": "$datetime = jalali();\n// if now 1397-10-11 15:20:11\necho $datetime->year;\n// output 10"
                },
                {
                    "id": "get_day",
                    "name": "get day",
                    "title": "day",
                    "description": "To get day on object jalali",
                    "return": "int",
                    "example": "$datetime = jalali();\n// if now 1397-10-11 10:20:11\necho $datetime->year;\n// output 11"
                },
                {
                    "id": "get_hour",
                    "name": "get hour",
                    "title": "hour",
                    "description": "To get hour on object jalali",
                    "return": "int",
                    "example": "$datetime = jalali();\n// if now 1397-09-11 10:20:11\necho $datetime->hour;\n// output 10"
                },
                {
                    "id": "get_minute",
                    "name": "get minute",
                    "title": "minute",
                    "description": "To get minute on object jalali",
                    "return": "int",
                    "example": "$datetime = jalali();\n// if now 1397-10-11 10:20:11\necho $datetime->minute;\n// output 20"
                },
                {
                    "id": "get_second",
                    "name": "get second",
                    "title": "second",
                    "description": "To get second on object jalali",
                    "return": "int",
                    "example": "$datetime = jalali();\n// if now 1397-10-11 10:20:33\necho $datetime->hour\n// output 33"
                },
                {
                    "id": "get_micro",
                    "name": "get micro",
                    "title": "micro",
                    "description": "To get micro on object jalali",
                    "return": "int",
                    "example": "$datetime = jalali();\n// if now 1397-10-11 10:20:11.123843\necho $datetime->micro;\n// output 123843"
                },
                {
                    "id": "get_timestamp",
                    "name": "get timestamp",
                    "title": "timestamp",
                    "description": "To get timestamp on object jalali",
                    "return": "int",
                    "example": "$datetime = jalali();\n// if now 1396-03-14 14:18:23\necho $datetime->timestamp;\n// output 1496557661"
                },
                {
                    "id": "get_timezone",
                    "name": "get timezone",
                    "title": "timezone",
                    "description": "To get timezone on object jalali",
                    "return": "string",
                    "example": "$datetime = jalali();\n// if now 1396-03-14 14:18:23\necho $datetime->timezone;\n// output Asia/Tehran"
                },
                {
                    "id": "get_day_of_week",
                    "name": "get dayOfWeek",
                    "title": "dayOfWeek",
                    "description": "To get dayOfWeek on object jalali",
                    "return": "int",
                    "example": "$datetime = jalali();\n// if now friday\necho $datetime->dayOfWeek;\n// output 6"
                },
                {
                    "id": "get_day_of-year",
                    "name": "get dayOfYear",
                    "title": "dayOfYear",
                    "description": "To get dayOfYear on object jalali",
                    "return": "int",
                    "example": "$datetime = jalali();\n// if now 1396-02-14 14:18:23\necho $datetime->dayOfYear;\n// output 45"
                },
                {
                    "id": "get_days_in_month",
                    "name": "get daysInMonth",
                    "title": "daysInMonth",
                    "description": "To get daysInMonth on object jalali",
                    "return": "int",
                    "example": "$datetime = jalali();\n// if now 1396-03-14 14:18:23\necho $datetime->daysInMonth;\n// output 31"
                },
                {
                    "id": "set_year",
                    "name": "set year",
                    "title": "year",
                    "description": "To set year on object jalali",
                    "example": "$datetime = jalali();\n// if now 1396-02-14 14:18:23\n$datetime->year = 1398;\necho $datetime;\n// output 1398-02-14 14:18:23"
                },
                {
                    "id": "set_month",
                    "name": "set month",
                    "title": "month",
                    "description": "To set month on object jalali",
                    "example": "$datetime = jalali();\n// if now 1396-02-14 14:18:23\n$datetime->month = 13;\necho $datetime;\n// output 1397-01-14 14:18:23"
                },
                {
                    "id": "set_day",
                    "name": "set day",
                    "title": "day",
                    "description": "To set day on object jalali",
                    "example": "$datetime = jalali();\n// if now 1396-02-14 14:18:23\n$datetime->day = 25;\necho $datetime;\n// output 1396-02-25 14:18:23"
                },
                {
                    "id": "set_hour",
                    "name": "set hour",
                    "title": "hour",
                    "description": "To set hour on object jalali",
                    "example": "$datetime = jalali();\n// if now 1396-02-14 14:18:23\n$datetime->hour = 8;\necho $datetime;\n// output 1396-02-25 8:18:23"
                },
                {
                    "id": "set_minute",
                    "name": "set minute",
                    "title": "minute",
                    "description": "To set minute on object jalali",
                    "example": "$datetime = jalali();\n// if now 1396-02-14 14:18:23\n$datetime->minute = 25;\necho $datetime;\n// output 1396-02-25 14:25:23"
                },
                {
                    "id": "set_second",
                    "name": "set second",
                    "title": "second",
                    "description": "To set second on object jalali",
                    "example": "$datetime = jalali();\n// if now 1396-02-14 14:18:23\n$datetime->second = 55;\necho $datetime;\n// output 1396-02-25 14:18:55"
                },
                {
                    "id": "set_micro",
                    "name": "set micro",
                    "title": "micro",
                    "description": "To set micro on object jalali",
                    "example": "$datetime = jalali();\n// if now 1396-02-14 14:18:23\n$datetime->micro = 158265;\necho $datetime;\n// output 1396-02-25 14:18:23.158265"
                },
                {
                    "id": "set_timestamp",
                    "name": "set timestamp",
                    "title": "timestamp",
                    "description": "To set timestamp on object jalali",
                    "example": "$datetime = jalali();\n// if now 1396-02-14 14:18:23\n$datetime->timestamp = 1496557661;\necho $datetime;\n// output 1396-03-14 14:18:23"
                },
                {
                    "id": "set_timezone",
                    "name": "set timezone",
                    "title": "timezone",
                    "description": "To set timezone on object jalali",
                    "example": "$datetime = jalali();\n// if now 1396-02-14 14:18:23\n$datetime->timezone = 'Asia/Baku';\necho $datetime->timezone;\n// output Asia/Baku"
                },
                {
                    "id": "year",
                    "name": "year()",
                    "title": "year(value)",
                    "description": "To set year on object jalali",
                    "arguments": {
                        "value": "int"
                    },
                    "return": "object jalali",
                    "example": "$datetime = jalali();\n// if now 1396-02-14 14:18:23\necho $datetime->year(1398);\n// output 1398-02-14 14:18:23"
                },
                {
                    "id": "month",
                    "name": "month()",
                    "title": "month(value)",
                    "description": "To set month on object jalali",
                    "arguments": {
                        "value": "int"
                    },
                    "return": "object jalali",
                    "example": "$datetime = jalali();\n// if now 1396-02-14 14:18:23\necho $datetime->month(13);\n// output 1397-01-14 14:18:23"
                },
                {
                    "id": "day",
                    "name": "day()",
                    "title": "day(value)",
                    "description": "To set day on object jalali",
                    "arguments": {
                        "value": "int"
                    },
                    "return": "object jalali",
                    "example": "$datetime = jalali();\n// if now 1396-02-14 14:18:23\necho $datetime->day(25);\n// output 1396-02-25 14:18:23"
                },
                {
                    "id": "hour",
                    "name": "hour()",
                    "title": "hour(value)",
                    "description": "To set hour on object jalali",
                    "arguments": {
                        "value": "int"
                    },
                    "return": "object jalali",
                    "example": "$datetime = jalali();\n// if now 1396-02-14 14:18:23\necho $datetime->hour(8);\n// output 1396-02-25 8:18:23"
                },
                {
                    "id": "minute",
                    "name": "minute()",
                    "title": "minute(value)",
                    "description": "To set minute on object jalali",
                    "arguments": {
                        "value": "int"
                    },
                    "return": "object jalali",
                    "example": "$datetime = jalali();\n// if now 1396-02-14 14:18:23\necho $datetime->minute(25);\n// output 1396-02-25 14:25:23"
                },
                {
                    "id": "second",
                    "name": "second()",
                    "title": "second(value)",
                    "description": "To set second on object jalali",
                    "arguments": {
                        "value": "int"
                    },
                    "return": "object jalali",
                    "example": "$datetime = jalali();\n// if now 1396-02-14 14:18:23\necho $datetime->second(55);\n// output 1396-02-25 14:18:55"
                },
                {
                    "id": "micro",
                    "name": "micro()",
                    "title": "micro(value)",
                    "description": "To set micro on object jalali",
                    "arguments": {
                        "value": "int"
                    },
                    "return": "object jalali",
                    "example": "$datetime = jalali();\n// if now 1396-02-14 14:18:23\necho $datetime->micro(158265);\n// output 1396-02-25 14:18:23.158265"
                },
                {
                    "id": "timestamp",
                    "name": "timestamp()",
                    "title": "timestamp(value)",
                    "description": "To set timestamp on object jalali",
                    "arguments": {
                        "value": "int"
                    },
                    "return": "object jalali",
                    "example": "$datetime = jalali();\n// if now 1396-02-14 14:18:23\n$datetime->timestamp(1496557661);\n// output 1396-03-14 14:18:23"
                },
                {
                    "id": "timezone",
                    "name": "timezone()",
                    "title": "timezone()",
                    "description": "To set timezone on object jalali",
                    "arguments": {
                        "value": "int"
                    },
                    "return": "object jalali",
                    "example": "$datetime = jalali();\n// if now 1396-02-14 14:18:23\necho $datetime->timezone('Asia/Baku');\n// output Asia/Baku"
                },
                {
                    "id": "set_date_time",
                    "name": "setDateTime()",
                    "title": "setDateTime(year, month, day, hour, minute, second, micro)",
                    "description": "To set date and time on object jalali",
                    "arguments": {
                        "year": "int",
                        "month": "int",
                        "day": "int",
                        "hour": "int",
                        "minute": "int",
                        "second": "int",
                        "micro": "int"
                    },
                    "return": "object jalali",
                    "example": "$datetime = jalali();\n// if now 1396-02-14 14:18:23\necho $datetime->setDateTime(1395, 4, 25, 16, 50, 42);\n// output 1395-04-25 16:50:42"
                },
                {
                    "id": "set_date",
                    "name": "setDate()",
                    "title": "setDate(year, month, day)",
                    "description": "To set date on object jalali",
                    "return": "object jalali",
                    "arguments": {
                        "year": "int",
                        "month": "int",
                        "day": "int"
                    },
                    "example": "$datetime = jalali();\n// if now 1396-02-14 14:18:23\necho $datetime->setDate(2022, 6, 17);\n// output 1401-03-27 16:50:42"
                },
                {
                    "id": "set_date_jalali",
                    "name": "setDateJalali()",
                    "title": "setDateJalali(year, month, day)",
                    "description": "To set date on object jalali",
                    "arguments": {
                        "year": "int",
                        "month": "int",
                        "day": "int"
                    },
                    "return": "object jalali",
                    "example": "$datetime = jalali();\n// if now 1396-02-14 14:18:23\necho $datetime->setDateJalali(1401,3,17);\n// output 1401-03-27 16:50:42"
                },
                {
                    "id": "set_time_string",
                    "name": "setTimeString()",
                    "title": "setTimeString(time)",
                    "description": "To set time on object jalali",
                    "arguments": {
                        "time": "string"
                    },
                    "return": "object jalali",
                    "example": "$datetime = jalali();\n// if now 1401-03-27 14:18:23\necho $datetime->setTimeString('12:25:45.695321');\n// output 1401-03-27 12:25:45.695321\necho $datetime->setTimeString('12:25:45');\n// output 1401-03-27 12:25:45\necho $datetime->setTimeString('12:25');\n// output 1401-03-27 12:25:00\necho $datetime->setTimeString('12:25');\n// output 1401-03-27 12:25:00\necho $datetime->setTimeString('12');\n// output 1401-03-27 12:00:00"
                }
            ]
        },
        {
            "id": "formatting",
            "name": "formatting",
            "title": "Formatting",
            "children": [
                {
                    "id": "format",
                    "name": "format()",
                    "title": "format(format)",
                    "description": "To represent date and time format",
                    "raw": "<p>To create the format you want read the PHP document <a href=\"https://php.net/manual/en/function.strftime.php\" target=\"_blank\">strftime</a> and <a href=\"https://php.net/manual/en/function.date.php\" target=\"_blank\">date</a>.</p>",
                    "arguments": {
                        "format": "string"
                    },
                    "return": "string",
                    "example": "echo jalali()->format('Y-n-j H:i');\n// output 1395-10-7 14:12\necho jalali()->format('%B %d، %Y');\n// output دی 7، 1395\necho jalali()->format('%Q %Y');\n// output زمستان 1395\necho jalali();\n// output 1395-10-07 14:12:25"
                },
                {
                    "id": "format_date_time",
                    "name": "formatDatetime()",
                    "title": "formatDatetime()",
                    "description": "To represent date and time format",
                    "return": "string",
                    "example": "echo jalali()->formatDatetime();\n// output 1395-10-07 14:12:25"
                },
                {
                    "id": "format_date",
                    "name": "formatDate()",
                    "title": "formatDate()",
                    "description": "To represent date format",
                    "return": "string",
                    "example": "echo jalali()->formatDate();\n// output 1395-10-07"
                },
                {
                    "id": "format_time",
                    "name": "formatTime()",
                    "title": "formatTime()",
                    "description": "To represent time format",
                    "return": "string",
                    "example": "echo jalali()->formatTime();\n// output 14:12:25"
                },
                {
                    "id": "format_jalali_datetime",
                    "name": "formatJalaliDatetime()",
                    "title": "formatJalaliDatetime()",
                    "description": "To represent jalali date format",
                    "return": "string",
                    "example": "echo jalali()->formatJalaliDatetime();\n// output 1395/10/07 14:12:25"
                },
                {
                    "id": "format_jalali_date",
                    "name": "formatJalaliDate()",
                    "title": "formatJalaliDate()",
                    "description": "To represent jalali date format",
                    "return": "string",
                    "example": "echo jalali()->formatJalaliDate();\n// output 1395/10/07"
                },
                {
                    "id": "format_gregorian",
                    "name": "formatGregorian()",
                    "title": "formatGregorian(format)",
                    "description": "To represent date and time format gregorian",
                    "raw": "<p>To create the format you want read the PHP document <a href=\"https://php.net/manual/en/function.strftime.php\" target=\"_blank\">strftime</a> and <a href=\"https://php.net/manual/en/function.date.php\" target=\"_blank\">date</a>.</p>",
                    "arguments": {
                        "format": "string"
                    },
                    "return": "string",
                    "example": "echo jalali()->formatGregorian('Y-n-j H:i');\n// output 2017-05-23 23:21:02"
                },
                {
                    "id": "format_difference",
                    "name": "formatDifference()",
                    "title": "formatJalaliDate(datetime)",
                    "description": "To display the date difference as a unit of time. If don't set parameter, the difference is calculated with the current time",
                    "arguments": {
                        "datetime": "jalali"
                    },
                    "return": "string",
                    "example": "echo jalali()->formatDifference(jalali('+1 year'));\n// output 1 سال بعد\necho jalali()->formatDifference(jalali('-1 year'));\n// output 1 سال قبل\necho jalali('+25 day')->formatDifference();\n// output 4 هفته بعد\necho jalali('-6 day')->formatDifference();\n// output 6 روز قبل\necho jalali()->formatDifference();\n// output الان\n"
                },
                {
                    "id": "format_word",
                    "name": "formatWord()",
                    "title": "formatWord(format)",
                    "description": "To display numbers in alphabetical",
                    "arguments": {
                        "format": "string"
                    },
                    "return": "string",
                    "example": "echo jalali()->formatWord('Y'); \n// output یک هزار و سیصد و نود و شش\necho jalali()->formatWord('l dS F');\n// output چهارشنبه بیست و نه ام شهریور\necho jalali()->formatWord('d F Y');\n// output بیست و نه شهریور یک هزار و سیصد و نود و شش\n"
                },
                {
                    "id": "set_format",
                    "name": "setFormat()",
                    "title": "formatJalaliDate(format)",
                    "arguments": {
                        "format": "string"
                    },
                    "description": "To set default output format",
                    "example": "Jalali::setFormat('Y/n/j H:i:s');\necho jalali(); // output 1395/12/12 00:11:35"
                },
                {
                    "id": "reset_format",
                    "name": "resetFormat()",
                    "description": "To reset output format",
                    "example": "Jalali::resetFormat('Y/n/j H:i:s');\necho jalali(); // output 1395-12-12 00:18:04"
                }
            ]
        },
        {
            "id": "modification",
            "name": "modification",
            "title": "Modification",
            "children": [
                {
                    "id": "add_year",
                    "name": "addYear()",
                    "title": "addYear()",
                    "description": "To increment a year jalali date",
                    "return": "object jalali",
                    "example": "echo jalali()->addYear(); \n// if now 1395-10-07 14:12:32 \n// output 1396-10-07 14:12:32"
                },
                {
                    "id": "add_years",
                    "name": "addYears()",
                    "title": "addYears(value)",
                    "description": "To increment years jalali date",
                    "arguments": {
                        "value": "int"
                    },
                    "return": "object jalali",
                    "example": "echo jalali()->addYears(3); \n// if now 1395-10-07 14:12:32 \n// output 1398-10-07 14:12:32"
                },
                {
                    "id": "sub_year",
                    "name": "subYear()",
                    "title": "subYear()",
                    "description": "To decrement a year jalali date",
                    "return": "object jalali",
                    "example": "echo jalali()->subYear(); \n// if now 1395-10-07 14:12:32 \n// output 1394-10-07 14:12:32"
                },
                {
                    "id": "sub_years",
                    "name": "subYears()",
                    "title": "subYears(value)",
                    "description": "To decrement years jalali date",
                    "arguments": {
                        "value": "int"
                    },
                    "return": "object jalali",
                    "example": "echo jalali()->subYears(3); \n// if now 1395-10-07 14:12:32 \n// output 1392-10-07 14:12:32"
                },
                {
                    "id": "add_month",
                    "name": "addMonth()",
                    "title": "addMonth()",
                    "description": "To increment a month jalali date",
                    "return": "object jalali",
                    "example": "echo jalali()->addMonth(); \n// if now 1395-10-07 14:12:32 \n// output 1395-11-07 14:12:32"
                },
                {
                    "id": "add_months",
                    "name": "addMonths()",
                    "title": "addMonths(value)",
                    "description": "To increment months jalali date",
                    "arguments": {
                        "value": "int"
                    },
                    "return": "object jalali",
                    "example": "echo jalali()->addMonth(2); \n// if now 1395-10-07 14:12:32 \n// output 1395-12-07 14:12:32"
                },
                {
                    "id": "sub_month",
                    "name": "subMonth()",
                    "title": "subMonth()",
                    "description": "To decrement a month jalali date",
                    "return": "object jalali",
                    "example": "echo jalali()->subMonth(); \n// if now 1395-10-07 14:12:32 \n// output 1395-09-07 14:12:32"
                },
                {
                    "id": "sub_months",
                    "name": "subMonths()",
                    "title": "subMonths(value)",
                    "description": "To decrement months jalali date",
                    "arguments": {
                        "value": "int"
                    },
                    "return": "object jalali",
                    "example": "echo jalali()->subMonths(3); \n// if now 1395-10-07 14:12:32 \n// output 1395-07-07 14:12:32"
                },
                {
                    "id": "add_week",
                    "name": "addWeek()",
                    "title": "addWeek()",
                    "description": "To increment a week jalali date",
                    "return": "object jalali",
                    "example": "echo jalali()->addMonth(); \n// if now 1395-10-07 14:12:32 \n// output 1395-10-14 14:12:32"
                },
                {
                    "id": "add_weeks",
                    "name": "addWeeks()",
                    "description": "To increment weeks jalali date",
                    "arguments": {
                        "value": "int"
                    },
                    "return": "object jalali",
                    "example": "echo jalali()->addWeeks(3); \n// if now 1395-10-07 14:12:32 \n// output 1395-12-28 14:12:32"
                },
                {
                    "id": "sub_week",
                    "name": "subWeek()",
                    "title": "subWeek()",
                    "description": "To decrement a week jalali date",
                    "return": "object jalali",
                    "example": "echo jalali()->subWeek(); \n// if now 1395-10-07 14:12:32 \n// output 1395-09-30 14:12:32"
                },
                {
                    "id": "sub_weeks",
                    "name": "subWeeks()",
                    "title": "subWeeks(value)",
                    "description": "To decrement weeks jalali date",
                    "arguments": {
                        "value": "int"
                    },
                    "return": "object jalali",
                    "example": "echo jalali()->subWeeks(3); \n// if now 1395-10-07 14:12:32 \n// output 1395-09-16 14:12:32"
                },
                {
                    "id": "add_day",
                    "name": "addDay()",
                    "title": "addDay()",
                    "description": "To increment a day jalali date",
                    "return": "object jalali",
                    "example": "echo jalali()->addDay(); \n// if now 1395-10-07 14:12:32 \n// output 1395-10-08 14:12:32"
                },
                {
                    "id": "add_days",
                    "name": "addDays()",
                    "description": "To increment days jalali date",
                    "arguments": {
                        "value": "int"
                    },
                    "return": "object jalali",
                    "example": "echo jalali()->addWeeks(3); \n// if now 1395-10-07 14:12:32 \n// output 1395-10-10 14:12:32"
                },
                {
                    "id": "sub_day",
                    "name": "subDay()",
                    "title": "subDay()",
                    "description": "To decrement a day jalali date",
                    "return": "object jalali",
                    "example": "echo jalali()->subDay(); \n// if now 1395-10-07 14:12:32 \n// output 1395-10-06 14:12:32"
                },
                {
                    "id": "sub_days",
                    "name": "subDays()",
                    "title": "subDays(value)",
                    "description": "To decrement days jalali date",
                    "arguments": {
                        "value": "int"
                    },
                    "return": "object jalali",
                    "example": "echo jalali()->subDays(3); \n// if now 1395-10-07 14:12:32 \n// output 1395-10-04 14:12:32"
                },
                {
                    "id": "add_hour",
                    "name": "addHour()",
                    "title": "addHour()",
                    "description": "To increment a day jalali date",
                    "return": "object jalali",
                    "example": "echo jalali()->addHour(); \n// if now 1395-10-07 14:12:32 \n// output 1395-10-07 15:12:32"
                },
                {
                    "id": "add_hours",
                    "name": "addHours()",
                    "title": "addHours()",
                    "description": "To increment days jalali date",
                    "arguments": {
                        "value": "int"
                    },
                    "return": "object jalali",
                    "example": "echo jalali()->addHours(3); \n// if now 1395-10-07 14:12:32 \n// output 1395-10-07 17:12:32"
                },
                {
                    "id": "sub_hour",
                    "name": "subHour()",
                    "title": "subHour()",
                    "description": "To decrement a hour jalali date",
                    "return": "object jalali",
                    "example": "echo jalali()->subHour(); \n// if now 1395-10-07 14:12:32 \n// output 1395-10-07 13:12:32"
                },
                {
                    "id": "sub_hours",
                    "name": "subHours()",
                    "title": "subHours(value)",
                    "description": "To decrement hours jalali date",
                    "arguments": {
                        "value": "int"
                    },
                    "return": "object jalali",
                    "example": "echo jalali()->subHours(3); \n// if now 1395-10-07 14:12:32 \n// output 1395-10-07 11:12:32"
                },
                {
                    "id": "add_minute",
                    "name": "addMinute()",
                    "title": "addMinute()",
                    "description": "To increment a minute jalali date",
                    "return": "object jalali",
                    "example": "echo jalali()->addMinute(); \n// if now 1395-10-07 14:12:32 \n// output 1395-10-07 14:13:32"
                },
                {
                    "id": "add_minutes",
                    "name": "addMinutes()",
                    "title": "addMinutes(value)",
                    "description": "To increment minutes jalali date",
                    "arguments": {
                        "value": "int"
                    },
                    "return": "object jalali",
                    "example": "echo jalali()->addMinutes(3); \n// if now 1395-10-07 14:12:32 \n// output 1395-10-07 14:15:32"
                },
                {
                    "id": "sub_minute",
                    "name": "subMinute()",
                    "title": "subMinute()",
                    "description": "To decrement a minute jalali date",
                    "return": "object jalali",
                    "example": "echo jalali()->subMinute(); \n// if now 1395-10-07 14:12:32 \n// output 1395-10-07 14:11:32"
                },
                {
                    "id": "sub_minutes",
                    "name": "subMinutes()",
                    "title": "subMinutes(value)",
                    "description": "To decrement minutes jalali date",
                    "arguments": {
                        "value": "int"
                    },
                    "return": "object jalali",
                    "example": "echo jalali()->subMinutes(3); \n// if now 1395-10-07 14:12:32 \n// output 1395-10-07 14:09:32"
                },
                {
                    "id": "add_second",
                    "name": "addSecond()",
                    "title": "addSecond()",
                    "description": "To decrement a second jalali date",
                    "return": "object jalali",
                    "example": "echo jalali()->addSecond(); \n// if now 1395-10-07 14:12:32 \n// output 1395-10-07 14:12:33"
                },
                {
                    "id": "add_seconds",
                    "name": "addSeconds()",
                    "title": "addSeconds(value)",
                    "description": "To increment minutes jalali date",
                    "arguments": {
                        "value": "int"
                    },
                    "return": "object jalali",
                    "example": "echo jalali()->addSeconds(3); \n// if now 1395-10-07 14:12:32 \n// output 1395-10-07 14:12:35"
                },
                {
                    "id": "sub_second",
                    "name": "subSecond()",
                    "title": "subSecond()",
                    "description": "To decrement a second jalali date",
                    "return": "object jalali",
                    "example": "echo jalali()->subSecond(); \n// if now 1395-10-07 14:12:32 \n// output 1395-10-07 14:12:31"
                },
                {
                    "id": "sub_seconds",
                    "name": "subSeconds()",
                    "title": "subSeconds(value)",
                    "description": "To decrement seconds jalali date",
                    "arguments": {
                        "value": "int"
                    },
                    "return": "object jalali",
                    "example": "echo jalali()->subSeconds(3); \n// if now 1395-10-07 14:12:32 \n// output 1395-10-07 14:12:29"
                }
            ]
        },
        {
            "id": "boundaries",
            "name": "boundaries",
            "title": "Boundaries",
            "children": [
                {
                    "id": "start_year",
                    "name": "startYear()",
                    "title": "startYear()",
                    "description": "To start year jalali date",
                    "return": "object jalali",
                    "example": "echo jalali()->startYear(); \n// if now 1395-10-07 14:12:32 \n// output 1395-01-01 00:00:00"
                },
                {
                    "id": "end_year",
                    "name": "endYear()",
                    "title": "endYear()",
                    "description": "To end year jalali date",
                    "return": "object jalali",
                    "example": "echo jalali()->endYear(); \n// if now 1395-10-07 14:12:32 \n// output 1395-12-30 23:59:59"
                },
                {
                    "id": "start_quarter",
                    "name": "startQuarter()",
                    "title": "startQuarter()",
                    "description": "To start quarter jalali date",
                    "return": "object jalali",
                    "example": "echo jalali()->startQuarter(); \n// if now 1395-11-07 14:12:32 \n// output 1395-10-01 00:00:00"
                },
                {
                    "id": "end_quarter",
                    "name": "endQuarter()",
                    "title": "endQuarter()",
                    "description": "To end quarter jalali date",
                    "return": "object jalali",
                    "example": "echo jalali()->endQuarter(); \n// if now 1395-11-07 14:12:32 \n// output 1395-12-30 23:59:59"
                },
                {
                    "id": "start_month",
                    "name": "startMonth()",
                    "title": "startMonth()",
                    "description": "To start month jalali date",
                    "return": "object jalali",
                    "example": "echo jalali()->startMonth(); \n// if now 1395-10-07 14:12:32 \n// output 1395-10-01 00:00:00"
                },
                {
                    "id": "end_month",
                    "name": "endMonth()",
                    "title": "endMonth()",
                    "description": "To end month jalali date",
                    "return": "object jalali",
                    "example": "echo jalali()->endMonth(); \n// if now 1395-10-07 14:12:32 \n// output 1395-10-30 23:59:59"
                },
                {
                    "id": "start_week",
                    "name": "startWeek()",
                    "title": "startWeek()",
                    "description": "To start week jalali date",
                    "return": "object jalali",
                    "example": "echo jalali()->startWeek(); \n// if now 1395-10-07 14:12:32 \n// output 1395-10-04 00:00:00"
                },
                {
                    "id": "end_week",
                    "name": "endWeek()",
                    "title": "endWeek()",
                    "description": "To end week jalali date",
                    "return": "object jalali",
                    "example": "echo jalali()->endWeek(); \n// if now 1395-10-07 14:12:32 \n// output 1395-10-10 23:59:59"
                },
                {
                    "id": "start_day",
                    "name": "startDay()",
                    "title": "startDay()",
                    "description": "To start day jalali date",
                    "return": "object jalali",
                    "example": "echo jalali()->startDay(); \n// if now 1395-10-07 14:12:32 \n// output 1395-10-07 00:00:00"
                },
                {
                    "id": "end_day",
                    "name": "endDay()",
                    "title": "endDay()",
                    "description": "To end day jalali date",
                    "return": "object jalali",
                    "example": "echo jalali()->endDay(); \n// if now 1395-10-07 14:12:32 \n// output 1395-10-07 23:59:59"
                },
                {
                    "id": "start_hour",
                    "name": "startHour()",
                    "title": "startHour()",
                    "description": "To start hour jalali date",
                    "return": "object jalali",
                    "example": "echo jalali()->startHour(); \n// if now 1395-10-07 14:12:32 \n// output 1395-10-07 14:00:00"
                },
                {
                    "id": "end_hour",
                    "name": "endHour()",
                    "title": "endHour()",
                    "description": "To end hour jalali date",
                    "return": "object jalali",
                    "example": "echo jalali()->endHour(); \n// if now 1395-10-07 14:12:32 \n// output 1395-10-07 14:59:59"
                },
                {
                    "id": "start_minute",
                    "name": "startMinute()",
                    "title": "startMinute()",
                    "description": "To start minute jalali date",
                    "return": "object jalali",
                    "example": "echo jalali()->startMinute(); \n// if now 1395-10-07 14:12:32 \n// output 1395-10-07 14:12:00"
                },
                {
                    "id": "end_minute",
                    "name": "endMinute()",
                    "title": "endMinute()",
                    "description": "To start minute jalali date",
                    "return": "object jalali",
                    "example": "echo jalali()->endMinute(); \n// if now 1395-10-07 14:12:32 \n// output 1395-10-07 14:12:59"
                }
            ]
        },
        {
            "id": "comparison",
            "name": "comparison",
            "title": "Comparison",
            "children": [
                {
                    "id": "diff_years",
                    "name": "diffYears()",
                    "title": "diffYears(datetime)",
                    "description": "To difference year datetime together.",
                    "arguments": {
                        "datetime": "object jalali"
                    },
                    "return": "object jalali",
                    "example": "echo jalali('2017-05-15')->diffYears(jalali('2018-05-15'))\n // output -1"
                },
                {
                    "id": "diff_months",
                    "name": "diffMonths()",
                    "title": "diffMonths(datetime)",
                    "description": "To difference month datetime together.",
                    "arguments": {
                        "datetime": "object jalali"
                    },
                    "return": "object jalali",
                    "example": "echo jalali('2017-08-15')->diffYears()\n// if now 2017-05-15 \n// output 3"
                },
                {
                    "id": "diff_weeks",
                    "name": "diffWeeks()",
                    "title": "diffWeeks(datetime)",
                    "description": "To difference week datetime together.",
                    "arguments": {
                        "datetime": "object jalali"
                    },
                    "return": "object jalali",
                    "example": "echo jalali('2017-05-15')->diffWeeks()\n// if now 2017-05-15 \n // output 2"
                },
                {
                    "id": "diff_days",
                    "name": "diffDays()",
                    "title": "diffDays(datetime)",
                    "description": "To difference day datetime together.",
                    "arguments": {
                        "datetime": "object jalali"
                    },
                    "return": "object jalali",
                    "example": "echo jalali('2017-05-15')->diffDays()\n// if now 2017-05-18 \n // output -3"
                },
                {
                    "id": "diff_hours",
                    "name": "diffHours()",
                    "title": "diffHours(datetime)",
                    "description": "To difference hour datetime together.",
                    "arguments": {
                        "datetime": "object jalali"
                    },
                    "return": "object jalali",
                    "example": "echo jalali('2017-05-15 12:20:32')->diffDays()\n// if now 2017-05-18 18:56:43 \n // output -6"
                },
                {
                    "id": "diff_minutes",
                    "name": "diffMinutes()",
                    "title": "diffMinutes(datetime)",
                    "description": "To difference minute datetime together.",
                    "arguments": {
                        "datetime": "object jalali"
                    },
                    "return": "object jalali",
                    "example": "echo jalali('2017-05-15 12:20:32')->diffMinutes()\n// if now 2017-05-18 12:56:43 \n // output -36"
                },
                {
                    "id": "diff_seconds",
                    "name": "diffSeconds()",
                    "title": "diffSeconds(datetime)",
                    "description": "To difference minute datetime together.",
                    "arguments": {
                        "datetime": "object jalali"
                    },
                    "return": "object jalali",
                    "example": "echo jalali('2017-05-15 12:20:32')->diffSeconds()\n// if now 2017-05-18 12:20:43 \n // output -10"
                },
                {
                    "id": "eq",
                    "name": "eq()",
                    "title": "eq(datetime)",
                    "description": "To compere equal datetime together.",
                    "arguments": {
                        "datetime": "Jalali|null"
                    },
                    "return": "bool",
                    "example": "echo jalali()->eq(jalalai('-1 minute')); \n// output false"
                },
                {
                    "id": "equal_to",
                    "name": "equalTo()",
                    "title": "equalTo(datetime)",
                    "description": "To compere equal datetime together.",
                    "arguments": {
                        "datetime": "Jalali|null"
                    },
                    "return": "bool",
                    "example": "echo jalali()->equalTo(); \n// output true"
                },
                {
                    "id": "ne",
                    "name": "ne()",
                    "title": "ne(datetime)",
                    "description": "To compere not equal datetime together.",
                    "arguments": {
                        "datetime": "Jalali|null"
                    },
                    "return": "bool",
                    "example": "echo jalali()->ne(jalalai('-1 minute')); \n// output true"
                },
                {
                    "id": "not_equal_to",
                    "name": "notEqualTo()",
                    "title": "notEqualTo(datetime)",
                    "description": "To compere not equal datetime together.",
                    "arguments": {
                        "datetime": "Jalali|null"
                    },
                    "return": "bool",
                    "example": "echo jalali()->notEqualTo(); \n// output false"
                },
                {
                    "id": "gt",
                    "name": "gt()",
                    "title": "gt(datetime)",
                    "description": "To compere greater than datetime together.",
                    "arguments": {
                        "datetime": "Jalali|null"
                    },
                    "return": "bool",
                    "example": "echo jalali()->gt(jalalai('-5 minute')); \n// output true"
                },
                {
                    "id": "greater_than",
                    "name": "greaterThan()",
                    "title": "greaterThan(datetime)",
                    "description": "To compere greater than datetime together.",
                    "arguments": {
                        "datetime": "Jalali|null"
                    },
                    "return": "bool",
                    "example": "echo jalali()->greaterThan(); \n// output false"
                },
                {
                    "id": "gte",
                    "name": "gte()",
                    "title": "gte(datetime)",
                    "description": "To compere greater than or equal datetime together.",
                    "arguments": {
                        "datetime": "Jalali|null"
                    },
                    "return": "bool",
                    "example": "echo jalali()->gte(); \n// output true"
                },
                {
                    "id": "greater_than_or_equal_to",
                    "name": "greaterThanOrEqualTo()",
                    "title": "greaterThanOrEqualTo(datetime)",
                    "description": "To compere greater than or equal datetime together.",
                    "arguments": {
                        "datetime": "Jalali|null"
                    },
                    "return": "bool",
                    "example": "echo jalali()->greaterThanOrEqualTo(jalali('+2 second')); \n// output false"
                },
                {
                    "id": "lt",
                    "name": "lt()",
                    "title": "lt(datetime)",
                    "description": "To compere less than datetime together.",
                    "arguments": {
                        "datetime": "Jalali|null"
                    },
                    "return": "bool",
                    "example": "echo jalali()->lt(jalali('+2 second')); \n// output true"
                },
                {
                    "id": "less_than",
                    "name": "lessThan()",
                    "title": "lessThan(datetime)",
                    "description": "To compere less than datetime together.",
                    "arguments": {
                        "datetime": "Jalali|null"
                    },
                    "return": "bool",
                    "example": "echo jalali()->lessThan(jalali('-3 second')); \n// output false"
                },
                {
                    "id": "lte",
                    "name": "lte()",
                    "title": "lte(datetime)",
                    "description": "To compere less than or equal datetime together.",
                    "arguments": {
                        "datetime": "Jalali|null"
                    },
                    "return": "bool",
                    "example": "echo jalali()->lte(); \n// output true"
                },
                {
                    "id": "less_than_or_equal_to",
                    "name": "lessThanOrEqualTo()",
                    "title": "lessThanOrEqualTo(datetime)",
                    "description": "To compere less than or equal datetime together.",
                    "arguments": {
                        "datetime": "Jalali|null"
                    },
                    "return": "bool",
                    "example": "echo jalali()->lessThanOrEqualTo(jalali('+2 hour')); \n// output false"
                },
                {
                    "id": "between",
                    "name": "between()",
                    "title": "between(first, second, equal)",
                    "description": "To compere less than or equal datetime together.",
                    "arguments": {
                        "first": "Jalali",
                        "second": "Jalali",
                        "equal": "bool"
                    },
                    "return": "bool",
                    "example": "echo jalali()->between(jalali('+2 hour') , jalali('+1 hour')); \n// output false"
                },
                {
                    "id": "closest",
                    "name": "closest()",
                    "title": "closest(first, second)",
                    "description": "To get closest datetime between two datetime.",
                    "arguments": {
                        "first": "Jalali",
                        "second": "Jalali"
                    },
                    "return": "Jalali",
                    "example": "echo $first = jalali('+2 hour'); \n// output 1398-03-15 21:22:23 \n echo $second = jalali('-1 hour'); \n// output 1398-03-15 18:22:23 \n echo jalali()->closest($first , $secound); \n// output 1398-03-15 18:22:23"
                },
                {
                    "id": "farthest",
                    "name": "farthest()",
                    "title": "farthest(first, second)",
                    "description": "To get farthest datetime between two datetime.",
                    "arguments": {
                        "first": "Jalali",
                        "second": "Jalali"
                    },
                    "return": "Jalali",
                    "example": "echo $first = jalali('+2 hour'); \n// output 1398-03-15 21:22:23 \n echo $second = jalali('-1 hour'); \n// output 1398-03-15 18:22:23 \n echo jalali()->farthest($first , $secound); \n// output 1398-03-15 18:22:23"
                },
                {
                    "id": "min",
                    "name": "min()",
                    "title": "min(datetime)",
                    "description": "To get minimum datetime between two datetime.",
                    "arguments": {
                        "datetime": "Jalali"
                    },
                    "return": "Jalali",
                    "example": "echo $datetime = jalali('-2 hour'); \n// output 1398-03-15 21:22:23 \n echo jalali()->min($datetime); \n// output 1398-03-15 21:22:23"
                },
                {
                    "id": "minimum",
                    "name": "minimum()",
                    "title": "minimum(datetime)",
                    "description": "To get minimum datetime between two datetime.",
                    "arguments": {
                        "datetime": "Jalali"
                    },
                    "return": "Jalali",
                    "example": "echo $datetime = jalali('+2 hour'); \n// output 1398-03-15 21:22:23 \n echo jalali()->min($datetime); \n// output 1398-03-15 19:22:23"
                },
                {
                    "id": "max",
                    "name": "max()",
                    "title": "max(datetime)",
                    "description": "To get maximum datetime between two datetime.",
                    "arguments": {
                        "datetime": "Jalali"
                    },
                    "return": "Jalali",
                    "example": "echo $datetime = jalali('+2 hour'); \n// output 1398-03-15 21:22:23 \n echo jalali()->max($datetime); \n// output 1398-03-15 21:22:23"
                },
                {
                    "id": "maximum",
                    "name": "maximum()",
                    "title": "maximum(datetime)",
                    "description": "To get maximum datetime between two datetime.",
                    "return": "bool",
                    "example": "echo $datetime = jalali('-2 hour'); \n// output 1398-03-15 21:22:23 \n echo jalali()->maximum($datetime); \n// output 1398-03-15 19:22:23"
                },
                {
                    "id": "is_weekday",
                    "name": "isWeekday()",
                    "title": "isWeekday()",
                    "description": "To get datetime is in weekdays.",
                    "return": "Jalali",
                    "example": "echo $datetime = jalali()->format('j'); \n// output شنبه \n echo $datetime->isWeekday(); \n// output true"
                },
                {
                    "id": "is_weekend",
                    "name": "isWeekend()",
                    "title": "isWeekend()",
                    "description": "To get datetime is in weekend days.",
                    "return": "bool",
                    "example": "echo $datetime = jalali()->format('j'); \n// output جمعه \n echo $datetime->isWeekend(); \n// output true"
                },
                {
                    "id": "is_yesterday",
                    "name": "isYesterday()",
                    "title": "isYesterday()",
                    "description": "To get datetime is yesterday.",
                    "return": "bool",
                    "example": "echo jalali()->isYesterday(); \n// output false"
                },
                {
                    "id": "is_today",
                    "name": "isToday()",
                    "title": "isToday()",
                    "description": "To get datetime is today.",
                    "return": "bool",
                    "example": "echo jalali()->isToday(); \n// output true"
                },
                {
                    "id": "is_next_week",
                    "name": "isNextWeek()",
                    "title": "isNextWeek()",
                    "description": "To get datetime is next week.",
                    "return": "bool",
                    "example": "echo jalali('next week')->isNextWeek(); \n// output true"
                },
                {
                    "id": "is_last_week",
                    "name": "isLastWeek()",
                    "title": "isLastWeek()",
                    "description": "To get datetime is days last week.",
                    "return": "bool",
                    "example": "echo jalali('previous week')->isLastWeek(); \n// output true"
                },
                {
                    "id": "is_next_month",
                    "name": "isNextMonth()",
                    "title": "isNextMonth()",
                    "description": "To get datetime is days next month.",
                    "return": "bool",
                    "example": "echo jalali('+2 month')->isNextMonth(); \n// output false"
                },
                {
                    "id": "is_last_month",
                    "name": "isLastMonth()",
                    "title": "isLastMonth()",
                    "description": "To get datetime is days last month.",
                    "return": "bool",
                    "example": "echo jalali('-35 day')->isLastMonth(); \n// output true"
                },
                {
                    "id": "is_next_year",
                    "name": "isNextYear()",
                    "title": "isNextYear()",
                    "description": "To get datetime is days next year.",
                    "return": "bool",
                    "example": "echo jalali('+12 month')->isNextYear(); \n// output true"
                },
                {
                    "id": "is_last_year",
                    "name": "isLastYear()",
                    "title": "isLastYear()",
                    "description": "To get datetime is days last year.",
                    "return": "bool",
                    "example": "echo jalali('+5 day')->isLastYear(); \n// output false"
                },
                {
                    "id": "is_future",
                    "name": "isFuture()",
                    "title": "isFuture()",
                    "description": "To get datetime is future.",
                    "return": "bool",
                    "example": "echo jalali('+5 day')->isFuture(); \n// output true"
                },
                {
                    "id": "is_past",
                    "name": "isPast()",
                    "title": "isPast()",
                    "description": "To get datetime is past.",
                    "return": "bool",
                    "example": "echo jalali('-2 day')->isPast(); \n// output true"
                },
                {
                    "id": "is_current_year",
                    "name": "isCurrentYear()",
                    "title": "isCurrentYear()",
                    "description": "To get datetime is current year.",
                    "return": "bool",
                    "example": "echo jalali()->isCurrentYear(); \n// output true"
                },
                {
                    "id": "is_current_month",
                    "name": "isCurrentMonth()",
                    "title": "isCurrentMonth()",
                    "description": "To get datetime is current month.",
                    "return": "bool",
                    "example": "echo jalali()->endMonth()->isCurrentMonth(); \n// output true"
                },
                {
                    "id": "is_same_as",
                    "name": "isSameAs()",
                    "title": "isSameAs(format, datetime)",
                    "description": "To get datetime is same part of datetime.",
                    "arguments": {
                        "format": "string",
                        "datetime": "Jalali|null"
                    },
                    "return": "bool",
                    "example": "echo jalali()->isSameAs('y', jalali()->startYear()); \n// output true"
                },
                {
                    "id": "is_same_year",
                    "name": "isSameYear()",
                    "title": "isSameYear(datetime)",
                    "description": "To get datetime is same year datetime.",
                    "arguments": {
                        "datetime": "Jalali|null"
                    },
                    "return": "bool",
                    "example": "echo jalali()->isSameYear(jalali()->startYear()); \n// output true"
                },
                {
                    "id": "is_same_month",
                    "name": "isSameMonth()",
                    "title": "isSameMonth(datetime)",
                    "description": "To get datetime is same month datetime.",
                    "arguments": {
                        "datetime": "Jalali|null"
                    },
                    "return": "bool",
                    "example": "echo jalali()->isSameMonth('y', jalali()->startMonth()); \n// output true"
                },
                {
                    "id": "is_same_day",
                    "name": "isSameDay()",
                    "title": "isSameDay(datetime)",
                    "description": "To get datetime is same day datetime.",
                    "arguments": {
                        "datetime": "Jalali|null"
                    },
                    "return": "bool",
                    "example": "echo jalali()->isSameDay(jalali()->startDay()); \n// output true"
                },
                {
                    "id": "is_birthday",
                    "name": "isBirthday()",
                    "title": "isBirthday(datetime)",
                    "description": "To get datetime is birthday datetime.",
                    "arguments": {
                        "datetime": "Jalali|null"
                    },
                    "return": "bool",
                    "example": "echo jalali()->isBirthday(); \n// output true"
                },
                {
                    "id": "is_saturday",
                    "name": "isSaturday()",
                    "title": "isSaturday()",
                    "description": "To get datetime is suturday.",
                    "return": "bool",
                    "example": "echo jalali()->startWeek()->isSaturday(); \n// output true"
                },
                {
                    "id": "is_sunday",
                    "name": "isSunday()",
                    "title": "isSunday()",
                    "description": "To get datetime is sunday.",
                    "return": "bool",
                    "example": "echo jalali()->startWeek()->isSunday(); \n// output false"
                },
                {
                    "id": "is_monday",
                    "name": "isMonday()",
                    "title": "isMonday()",
                    "description": "To get datetime is suturday.",
                    "return": "bool",
                    "example": "echo jalali('next monday')->isMonday(); \n// output true"
                },
                {
                    "id": "is_tuesday",
                    "name": "isTuesday()",
                    "title": "isTuesday()",
                    "description": "To get datetime is tuesday.",
                    "return": "bool",
                    "example": "echo jalali('previous tuesday')->isTuesday(); \n// output true"
                },
                {
                    "id": "is_wednesday",
                    "name": "isWednesday()",
                    "title": "isWednesday()",
                    "description": "To get datetime is wednesday.",
                    "return": "bool",
                    "example": "echo jalali('next monday')->isWednesday(); \n// output false"
                },
                {
                    "id": "is_thursday",
                    "name": "isThursday()",
                    "title": "isThursday()",
                    "description": "To get datetime is thursday.",
                    "return": "bool",
                    "example": "echo jalali('next monday')->isThursday(); \n// output false"
                },
                {
                    "id": "is_friday",
                    "name": "isFriday()",
                    "title": "isFriday()",
                    "description": "To get datetime is friday.",
                    "return": "bool",
                    "example": "echo jalali('next monday')->isFriday(); \n// output false"
                }
            ]
        },
        {
            "id": "validation",
            "name": "validation",
            "title": "Validation",
            "children": [
                {
                    "id": "is_leap_year",
                    "name": "isLeapYear()",
                    "title": "isLeapYear(year)",
                    "description": "Check year is leap.",
                    "arguments": {
                        "year": "int"
                    },
                    "return": "bool",
                    "example": "return Jalali::isLeapYear(1394);\n// output false"
                },
                {
                    "id": "is_valid_date",
                    "name": "isValidDate()",
                    "title": "isValidDate(year, month, day)",
                    "description": "Check date is valid.",
                    "arguments": {
                        "year": "int",
                        "month": "int",
                        "day": "int"
                    },
                    "return": "bool",
                    "example": "return Jalali::isValidDate(1394, 12, 30);\n// output false"
                },
                {
                    "id": "is_valid_time",
                    "name": "isValidTime()",
                    "title": "isValidTime(hour, minute, second)",
                    "description": "Check time is valid.",
                    "arguments": {
                        "hour": "int",
                        "minute": "int",
                        "second": "int"
                    },
                    "return": "bool",
                    "example": "return Jalali::isValidTime(27, 52, 30);\n// output false"
                },
                {
                    "id": "valid_year",
                    "name": "validYear()",
                    "title": "validYear(value)",
                    "description": "To valid year.",
                    "arguments": {
                        "value": "int"
                    },
                    "exception": "InvalidUnitException",
                    "example": "Jalali::validYear(-1); \n// throw InvalidUnitException"
                },
                {
                    "id": "valid_month",
                    "name": "validMount()",
                    "title": "validMount(value)",
                    "description": "To valid month.",
                    "arguments": {
                        "value": "int"
                    },
                    "exception": "InvalidUnitException",
                    "example": "Jalali::validMount(13); \n// throw InvalidUnitException"
                },
                {
                    "id": "valid_day",
                    "name": "validDay()",
                    "title": "validDay(year, month, day)",
                    "description": "To valid month.",
                    "arguments": {
                        "year": "int",
                        "month": "int",
                        "day": "int"
                    },
                    "exception": "InvalidUnitException",
                    "example": "Jalali::validDay(1400, 12, 30); \n// throw InvalidUnitException"
                },
                {
                    "id": "valid_hour",
                    "name": "validHour()",
                    "title": "validHour(value)",
                    "description": "To valid hour.",
                    "arguments": {
                        "value": "int"
                    },
                    "exception": "InvalidUnitException",
                    "example": "Jalali::validHour(30); \n// throw InvalidUnitException"
                },
                {
                    "id": "valid_minute",
                    "name": "validMinute()",
                    "title": "validMinute(value)",
                    "description": "To valid minute.",
                    "arguments": {
                        "value": "int"
                    },
                    "exception": "InvalidUnitException",
                    "example": "Jalali::validMinute(60); \n// throw InvalidUnitException"
                },
                {
                    "id": "valid_second",
                    "name": "validSecond()",
                    "title": "validSecond(value)",
                    "description": "To valid second.",
                    "arguments": {
                        "value": "int"
                    },
                    "exception": "InvalidUnitException",
                    "example": "Jalali::validSecond(60); \n// throw InvalidUnitException"
                },
                {
                    "id": "valid_micro",
                    "name": "validMicro()",
                    "title": "validMicro(value)",
                    "description": "To valid micro.",
                    "arguments": {
                        "value": "int"
                    },
                    "exception": "InvalidUnitException",
                    "example": "Jalali::validMicro(1828888484); \n// throw InvalidUnitException"
                },
                {
                    "id": "valid_date",
                    "name": "validDate()",
                    "title": "validDate(year, month, day)",
                    "description": "To valid date.",
                    "arguments": {
                        "year": "int",
                        "month": "int",
                        "day": "int"
                    },
                    "exception": "InvalidUnitException",
                    "example": "Jalali::validDate(1400, 12, 30); \n// throw InvalidUnitException"
                },
                {
                    "id": "valid_time",
                    "name": "validTime()",
                    "title": "validTime(hour, minute, second, micro)",
                    "description": "To valid time.",
                    "arguments": {
                        "hour": "int",
                        "minute": "int",
                        "second": "int",
                        "micro": "int|null"
                    },
                    "exception": "InvalidUnitException",
                    "example": "Jalali::validTime(25, 12, 30); \n// throw InvalidUnitException"
                },
                {
                    "id": "valid_datetime",
                    "name": "validDateTime()",
                    "title": "validDateTime(year, month, day, hour, minute, second, micro)",
                    "description": "To valid datetime.",
                    "arguments": {
                        "year": "int",
                        "month": "int",
                        "day": "int",
                        "hour": "int",
                        "minute": "int",
                        "second": "int",
                        "micro": "int|null"
                    },
                    "exception": "InvalidUnitException",
                    "example": "Jalali::validDateTime(1400, 12, 30, 25, 12, 30); \n// throw InvalidUnitException"
                }
            ]
        },
        {
            "id": "translation",
            "name": "translation",
            "title": "Translation",
            "children": [
                {
                    "id": "set_locale",
                    "name": "setLocale()",
                    "title": "setLocale(locale)",
                    "description": "To set locale.",
                    "arguments": {
                        "locale": "string"
                    },
                    "example": "Jalali::setLocale('fa');"
                },
                {
                    "id": "reset_locale",
                    "name": "resetLocale()",
                    "title": "resetLocale()",
                    "description": "To reset to default(fa) locale.",
                    "example": "Jalali::resetLocale();"
                },
                {
                    "id": "get_locale",
                    "name": "getLocale()",
                    "title": "getLocale()",
                    "description": "To get current locale",
                    "return": "string",
                    "example": "echo Jalali::getLocale(); \n// output fa"
                },
                {
                    "id": "set_messages",
                    "name": "setMessages()",
                    "title": "setMessages(locale, messages)",
                    "description": "To Append custom messages to locale.",
                    "arguments": {
                        "locale": "string",
                        "messages": "array"
                    },
                    "example": "Jalali::setMessages('fa', ['weekdays.7' => 'آدینه']);"
                }
            ]
        }
    ]
}